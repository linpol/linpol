#include <cmath>
#include <algorithm>

#include "x2b-v9x.h"
#include "poly-2b-v6x.h"

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp(const double& r0, const double& k,
                 const double* xcrd, int o1, int o2);

    double v_coul(const double& r0, const double& k,
                  const double* xcrd, int o1, int o2);

    void grads(const double& gg, double* xgrd, int o1, int o2) const;

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& r0, const double& k,
                       const double* xcrd, int o1, int o2)
{
    g[0] = xcrd[o1++] - xcrd[o2++];
    g[1] = xcrd[o1++] - xcrd[o2++];
    g[2] = xcrd[o1]   - xcrd[o2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double* xcrd, int o1, int o2)
{
    g[0] = xcrd[o1++] - xcrd[o2++];
    g[1] = xcrd[o1++] - xcrd[o2++];
    g[2] = xcrd[o1]   - xcrd[o2];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void variable::grads(const double& gg, double* xgrd, int o1, int o2) const
{
    for (int i = 0; i < 3; ++i) {
        const double d = gg*g[i];

        xgrd[o1++] += d;
        xgrd[o2++] -= d;
    }
}

//----------------------------------------------------------------------------//

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

//----------------------------------------------------------------------------//

const double thefit[] = {
 1.107644528957162e+01, // 0
 4.639154351030176e+01, // 1
 1.470851347967503e+02, // 2
-6.967948303617261e+01, // 3
-7.972553205477931e+01, // 4
-8.540109460659989e+00, // 5
 4.772375854582536e+01, // 6
 3.948325627048193e+00, // 7
-1.168927102075860e+01, // 8
 9.322062007311056e+00, // 9
 3.698072115678806e+00, // 10
-2.613367479768283e+01, // 11
 1.862950822614105e-01, // 12
-4.882580583467719e+01, // 13
 4.114847398532321e+00, // 14
-1.465261410677063e+01, // 15
-2.424500940536111e+01, // 16
-3.763017343022221e-01, // 17
 4.993881756235301e+00, // 18
-1.342461219471512e+01, // 19
-8.112368047402618e-01, // 20
-7.700598268923719e+01, // 21
-2.375765856028533e+00, // 22
 1.838710454754499e+00, // 23
 5.493976908247185e+01, // 24
-9.230495798408640e+00, // 25
-5.082973429307095e+00, // 26
-9.722334031460302e+01, // 27
-5.576835742239612e+00, // 28
 2.845429226539888e+00, // 29
-4.246404032542491e+01, // 30
-4.294920205810047e+01, // 31
 1.279206060545185e+01, // 32
 8.070018533141142e+01, // 33
 8.395845549151730e+01, // 34
 4.033378534831219e+00, // 35
 2.603922991196890e+00, // 36
 8.314455590615837e+01, // 37
-2.310351597941996e+01, // 38
 3.941753171843318e+01, // 39
-7.106640565024746e+00, // 40
-7.215465285192090e+00, // 41
 7.517817463390143e+00, // 42
-1.765920636841910e+00, // 43
 1.114225638250334e+00, // 44
 3.355095460588881e+02, // 45
 2.439829126524635e+01, // 46
-8.552651593164565e+00, // 47
 2.749917156390446e+01, // 48
 1.236725631461327e+01, // 49
-2.628302269499567e+01, // 50
 7.184418783389408e+01, // 51
-2.962629225425116e+01, // 52
 9.898240972141927e+00, // 53
-1.179804904135834e+02, // 54
 4.944539205981758e+00, // 55
-8.052315440745977e+00, // 56
-9.718414622323024e+01, // 57
 1.396229984807552e+02, // 58
-5.719601702951127e+01, // 59
-1.759620293807728e+02, // 60
 1.480353443258701e+02, // 61
 1.306222482936472e+02, // 62
 3.838051021958375e+01, // 63
 2.320457496142565e+02, // 64
-1.145308496879414e+00, // 65
 3.173294505174302e+01, // 66
-3.439504459835637e+02, // 67
 2.414371044631272e+01, // 68
-7.748789628415565e+00, // 69
-1.384342910415183e+00, // 70
 5.989466345807946e+01, // 71
-4.358048158419558e-01, // 72
-2.894973534100081e+00, // 73
 1.084636201523203e-01, // 74
 3.463682989416494e-01, // 75
 3.537270495442182e+00, // 76
 1.550192759545139e+01, // 77
-5.010670287175902e-02, // 78
 3.716273177257125e+00, // 79
 2.185343046402873e+01, // 80
-4.754712916922754e+01, // 81
-4.305041649675404e-03, // 82
 2.621517484865347e+00, // 83
-3.664382727835109e+00, // 84
 4.639147517000788e+01, // 85
-1.000255182174085e+00, // 86
-8.886593785251724e+00, // 87
 4.665819785194411e-01, // 88
 1.065665776023139e+02, // 89
 1.897333324320128e+02, // 90
-1.735346945035043e+00, // 91
-9.074136453522371e+01, // 92
 1.222378221820129e-01, // 93
 5.002773589609609e-01, // 94
-2.420602963575321e+01, // 95
-2.755836211080796e+01, // 96
-1.451590138462772e+00, // 97
-4.094582156057880e+01, // 98
 8.177576215944738e-01, // 99
 2.466811501658989e+00, // 100
-5.998994815040386e+00, // 101
-4.947093561369243e+00, // 102
 3.676058228476899e+00, // 103
 2.232139780010274e+01, // 104
-1.017860583057016e+02, // 105
-4.887288041250834e-01, // 106
-1.756209577638685e+02, // 107
 5.394409571875797e+00, // 108
-9.594613094897484e+01, // 109
-6.267933046333980e+00, // 110
 1.861420066421812e+00, // 111
 3.321918686709057e-01, // 112
-6.690534127493565e+00, // 113
-1.889865848938542e-02, // 114
 1.296147506846009e+00, // 115
-2.162778240812020e+01, // 116
-8.338861572528558e+01, // 117
 5.259467722762778e+00, // 118
-3.775683662875826e-02, // 119
-8.856568654766189e-01, // 120
 6.535926036435319e-01, // 121
 2.941785973320960e-01, // 122
 6.172626991775297e+01, // 123
 2.749715529483742e-01, // 124
 2.083805408586265e+01, // 125
 1.735740233122785e+01, // 126
 1.970981372058470e+01, // 127
 2.660911960172635e+00, // 128
 3.152708797777629e+01, // 129
-1.409637531965459e+00, // 130
 7.300196702350017e-01, // 131
 1.539339274948450e-02, // 132
-8.878533764934393e-02, // 133
 2.731000142101884e-01, // 134
 1.276945189098705e+02, // 135
 1.271943554930877e-02, // 136
-4.217662317669089e+01, // 137
-1.965995997600125e+01, // 138
 2.474195748114205e+01, // 139
-1.202940962976733e+02, // 140
 7.600306953091162e+01, // 141
-3.465224915099336e+01, // 142
 4.641193224538612e+01, // 143
 4.781856373901939e+01, // 144
 3.493345496792578e-02, // 145
 2.352407029282433e+01, // 146
 5.943920167617676e+01, // 147
-4.021985760885634e+00, // 148
-5.377725876090825e-02, // 149
 2.418668743921192e+01, // 150
 7.292550314599276e+01, // 151
-1.906128809334522e+00, // 152
-1.097315315976698e-02, // 153
-1.464508725044396e+01, // 154
 1.454577880923858e-02, // 155
 3.786756998603369e+01, // 156
-1.796091581504281e+00, // 157
-3.276578986774265e+01, // 158
-3.958207331116812e-01, // 159
-9.013017577227416e-01, // 160
-1.649112960914369e+00, // 161
-6.886942791480214e+00, // 162
 7.032484976725565e-01, // 163
-3.942722835238638e-01, // 164
-1.078401219833081e+02, // 165
-5.610838666815933e+01, // 166
 1.855639122026929e+00, // 167
-5.669824958899326e+01, // 168
 1.356171651450361e+00, // 169
 5.535425364955200e+01, // 170
-5.859917458344756e-02, // 171
 7.684949032986300e-01, // 172
-5.698025890430220e+01, // 173
-5.416809450723550e-01, // 174
 2.575349536580156e+02, // 175
-1.924775549108430e+00, // 176
-2.005111377634468e+01, // 177
 3.299506078085674e-01, // 178
 3.657781032642607e-01, // 179
-1.334385670018525e+00, // 180
-1.847861593381804e+01, // 181
-4.340471032156495e-01, // 182
 8.976269878798568e+01, // 183
-8.196686015151795e+01, // 184
-2.792929488787297e-03, // 185
 1.462750664044835e+00, // 186
-1.110585242312657e+02, // 187
 1.588755269904417e-02, // 188
 3.135327464094069e+01, // 189
-1.714441790738510e-01, // 190
-1.458479459307609e+00, // 191
-1.646430304940847e-02, // 192
 5.786881822217232e+00, // 193
-1.514168350537613e+00, // 194
 1.754618768024204e+00, // 195
 2.872736159104586e+00, // 196
-1.103435587983838e-01, // 197
 3.854333934469933e+01, // 198
-8.281491496833077e-01, // 199
 2.771027662449691e+01, // 200
-1.374078707910239e+01, // 201
 1.674192773116995e+00, // 202
 1.295126939898198e+00, // 203
-1.071946214057955e+01, // 204
-1.235052107176438e+01, // 205
 2.953362497307146e+00, // 206
 1.491531026125180e+02, // 207
-6.679092454014702e+01, // 208
-6.931279279039937e+00, // 209
 1.218264622013736e+01, // 210
 8.837946897978697e-01, // 211
 2.732551056591908e+00, // 212
 1.020407665328736e+00, // 213
-7.587909095557818e-01, // 214
-5.931925815454103e-04, // 215
 8.112215749339626e+01, // 216
-2.776713976888100e-02, // 217
 1.048490458414138e-01, // 218
-5.064345591620180e-03, // 219
 5.835852534029925e+01, // 220
-3.245550454195398e-02, // 221
-4.278905449954453e+01, // 222
-1.068751840797864e+02, // 223
 4.606482980995406e-03, // 224
 1.149613703855009e-01, // 225
 9.848391719273891e+01, // 226
 2.015825515679307e+01, // 227
 5.065277050151911e+00, // 228
 2.560852130571307e+02, // 229
-1.396746252526163e+00, // 230
-8.148256425183146e-01, // 231
-4.996128401155269e-01, // 232
 5.475431103038689e+01, // 233
 1.826244402919533e+00, // 234
-1.192041893607410e+02, // 235
 1.608474494971758e+02, // 236
-6.649744874142918e-03, // 237
 2.405500616979830e+00, // 238
 2.273283563367759e+00, // 239
-6.262297455774083e-01, // 240
-7.787060042389209e-01, // 241
-6.181860317837892e-01, // 242
 1.589862925070255e+00, // 243
 1.550631831779631e-02, // 244
 6.429436242126650e+00, // 245
-5.037005349502669e-01, // 246
 3.924205525749623e+01, // 247
 2.915743031308000e-01, // 248
 1.884538025302300e+01, // 249
 4.270382200149878e-01, // 250
-1.747295621969420e+00, // 251
 6.683033702516645e+00, // 252
-4.028294945559776e+01, // 253
-4.592304597642966e-01, // 254
-1.268184861878948e+00, // 255
-4.683302677781664e+01, // 256
-9.400061211248968e-01, // 257
-4.166945186982485e-01, // 258
-1.688774965903430e+00, // 259
 1.145204589925008e-02, // 260
-3.601294269992680e+00, // 261
-1.952228405376705e+00, // 262
 7.304133768344542e-02, // 263
 1.468091362214966e+02, // 264
 7.594528891215832e+01, // 265
 1.225922939107635e-02, // 266
-5.985794196596880e+01, // 267
-8.145041322475519e+00, // 268
 3.435076359127255e+01, // 269
-5.932394303093366e-01, // 270
-3.863020115888702e-02, // 271
 9.117616117402456e-01, // 272
 5.385580244336828e+01, // 273
-3.005952171733733e+01, // 274
-4.137249617152762e+00, // 275
-1.296093180957228e-01, // 276
 2.545922188494619e+01, // 277
 2.086227837375133e+02, // 278
-1.101360776240741e+02, // 279
-1.415064167607726e+00, // 280
-7.559194220809634e-04, // 281
 1.983725899554347e+01, // 282
-1.674009606230076e+00, // 283
-3.137031677356419e+00, // 284
-2.256068207506630e+01, // 285
 3.320767586908836e+01, // 286
 8.702889915593782e-01, // 287
-6.517184836504487e-05, // 288
 8.973926821328705e+00, // 289
-3.154243933214834e+00, // 290
-7.523208662341843e-01, // 291
 2.450075166339454e+01, // 292
 6.348109601379310e+01, // 293
-1.377186188464628e+01, // 294
 5.387891580284317e-02, // 295
 8.173646879494059e-01, // 296
 2.448759964351235e+01, // 297
 1.313096247398477e+01, // 298
 1.962468860633989e+01, // 299
-9.687121239131283e-01, // 300
-2.006868889169990e-02, // 301
 1.830528288761140e-02, // 302
 3.241236361520609e-01, // 303
 1.175838117892842e-01, // 304
-2.754499292735195e+00, // 305
-1.546234732696748e+01, // 306
-4.035598730298039e+01, // 307
 4.775433545155239e+00, // 308
-4.012690412589373e+00, // 309
-1.797192400799007e-04, // 310
-7.269078599947116e+00, // 311
 1.999885951570217e+01, // 312
-5.007218491865560e-01, // 313
 1.100303284402164e+01, // 314
-3.734507016382574e-01, // 315
-5.678079036392620e+01, // 316
 3.540034415944664e+00, // 317
-7.623998809520084e+00, // 318
 1.901235898487661e-01, // 319
-1.121316348642782e+01, // 320
-6.664661299660970e+00, // 321
 2.268193461095381e+01, // 322
-5.652605862129347e+01, // 323
 1.088345131490553e+01, // 324
-1.366345818329070e+02, // 325
 2.875548043917478e-02, // 326
 1.350137322001170e-02, // 327
-3.853255714867818e-02, // 328
 2.914910075960448e-01, // 329
 1.626890005741456e+02, // 330
-1.077026407027235e+00, // 331
 7.564274871738141e-01, // 332
-2.874303733411839e+01, // 333
-3.709495667436189e+01, // 334
-2.045155399188054e+00, // 335
 2.111255147088243e+00, // 336
-1.026078643566742e+01, // 337
-1.980098750760948e+02, // 338
-5.188463608510006e-02, // 339
-2.853834891492140e+00, // 340
 3.521532288241312e+00, // 341
 1.297034705917157e+01, // 342
-2.046217147463479e+01, // 343
-2.244322493873537e-01, // 344
 4.079869789173714e-02, // 345
-5.255274333600218e-02, // 346
 1.020115442891912e+02, // 347
 9.746315099058556e+00, // 348
-7.344571151272685e+00, // 349
-1.719710704871079e+00, // 350
-1.943888394673097e+00, // 351
 1.348338256786549e+00, // 352
-1.250109132817815e-04, // 353
 2.965406578697296e+00, // 354
-1.089935844799935e+02, // 355
-2.441979727159332e+00, // 356
-1.915921215787049e+01, // 357
 1.716924059442065e+01, // 358
-1.106410789763198e+02, // 359
-1.428857396990801e+02, // 360
-1.195092778138731e-02, // 361
 1.465952230643487e+01, // 362
-7.004305077480044e-01, // 363
-1.879117688368526e-01, // 364
 2.069175672212781e+00, // 365
-2.250550924892982e-01, // 366
 6.162664451904408e+01, // 367
-8.835777136923925e+00, // 368
 4.304057991197801e+00, // 369
 6.759982432647549e+00, // 370
 3.188469948648326e-04, // 371
 1.763989713216845e+00, // 372
-1.215892996880390e+02, // 373
 1.429819630383289e+00, // 374
 9.971273922222899e+01, // 375
 2.483908494692372e-02, // 376
-1.115860754627363e+00, // 377
 1.905769205720859e+02, // 378
 1.545292980306050e-01, // 379
 1.758562017749581e+01, // 380
-9.830535673067433e-01, // 381
 1.366061454017319e+00, // 382
-4.330808083048380e+00, // 383
-1.979161156095687e+02, // 384
-6.132349202306366e+01, // 385
 4.743430208089510e-02, // 386
 1.148659642236136e+02, // 387
 9.082697889051797e+00, // 388
-1.203557004589574e+02, // 389
-1.980755944685292e+00, // 390
-4.505368978288387e+01, // 391
-9.960388829217982e-01, // 392
 2.335484996575745e+01, // 393
 1.655941617443495e-02, // 394
-9.732192950037285e+01, // 395
 8.766414059602877e+01, // 396
 5.210915830178996e+01, // 397
-1.570011717888484e-01, // 398
-3.616967031630644e+01, // 399
 2.139565646908233e+01, // 400
 2.455045146681086e-03, // 401
 9.223862282818153e-05, // 402
-1.775678395863649e+01, // 403
 1.512730840155644e+00, // 404
-3.237269966355230e-01, // 405
-2.261630230180858e+02, // 406
 6.489842134904758e+01, // 407
 4.964142353281628e-01, // 408
 1.991128058167293e+00, // 409
 7.218595643008426e+00, // 410
 6.945440388278175e+00, // 411
 2.404217243696682e-02, // 412
 2.668209100840038e+01, // 413
-8.852850526162387e+00, // 414
 3.060588564209171e+01, // 415
 7.256819531390763e-03, // 416
 1.126859922226838e+01, // 417
 1.066318504963684e-03, // 418
 2.070294284291822e+02, // 419
 3.181360108868463e-01, // 420
 1.622584230109310e+02, // 421
 1.462024031867981e-02, // 422
-1.742184050410710e+01, // 423
 4.044078832827958e+00, // 424
-1.005635811060983e-01, // 425
-8.384079270280768e-01, // 426
-7.079585599416737e+01, // 427
-1.040185301146719e+00, // 428
 2.630407539731042e+01, // 429
 5.719280714096839e+00, // 430
 8.016768032001139e+00, // 431
 1.451936212650283e+01, // 432
-6.646972958390351e+00, // 433
-1.021915463493859e+00, // 434
 2.782511888252757e+00, // 435
 8.130858709881823e-01, // 436
 2.885207163344998e+00, // 437
 5.902027965520795e-01, // 438
 1.124769784057015e-01, // 439
-9.035542370195127e-01, // 440
-4.191935638227641e+00, // 441
-3.413666845284343e+00, // 442
 7.403891736340116e-01, // 443
-5.999178256565214e+01, // 444
-2.493283738226485e+01, // 445
 3.844824989502102e+00, // 446
-9.913875500534478e+01, // 447
-4.154504586564154e+00, // 448
-1.626368287833520e+02, // 449
 1.090371576834672e+00, // 450
-1.075305431750149e-03, // 451
 1.859648699102603e-01, // 452
-3.151831363786180e+00, // 453
-4.403750324860642e+01, // 454
-4.824700415320072e+01, // 455
-9.474071409862029e+01, // 456
-1.145096823529065e+01, // 457
 5.650109468971687e+01, // 458
 4.059314742342810e+01, // 459
 2.305338535731007e+01, // 460
 1.276046581526817e-01, // 461
 1.563280564184140e+00, // 462
-1.338261717105012e+01, // 463
-3.490768065975508e+01, // 464
-4.682229217828007e+01, // 465
 9.131081070163556e+01, // 466
 2.335150551740955e+00, // 467
 2.225141420480193e-03, // 468
 2.106528021107230e-02, // 469
-4.645912738195185e-03, // 470
-3.055849612646585e+01, // 471
-2.526657486478018e+02, // 472
-2.156726736154328e+02, // 473
-1.661775338823008e+02, // 474
-1.386441554521826e+00, // 475
-9.523436849900975e+01, // 476
 4.768231713004941e+01, // 477
 1.149576338861162e+01, // 478
-1.301317291011705e-02, // 479
 3.740031228247000e-02, // 480
-1.919867490244294e+00, // 481
-5.730445466021624e+00, // 482
-3.305083328394802e-03, // 483
 1.517011202145501e+01, // 484
-4.320837875283086e+00, // 485
-1.653606513689488e+00, // 486
 1.880560386708033e+02, // 487
-5.937409956018944e+01, // 488
 1.205008062004925e+02, // 489
 3.149561371651909e+00, // 490
-4.504686888372272e+01, // 491
 7.227753888516374e+01, // 492
 1.051456988449269e-01, // 493
 6.282241500518982e-04, // 494
-7.747181956116383e+00, // 495
 1.054555905212154e+02, // 496
-1.869866693730497e+01, // 497
 1.009551670884020e+02, // 498
-1.606044760653034e-02, // 499
 1.528541218177100e-01, // 500
 9.465146751015524e-01, // 501
 2.799712843362009e+01, // 502
 1.175760843511826e-02, // 503
 4.924454670352583e+01, // 504
 1.714114748305562e-01, // 505
-2.319347495831890e-02, // 506
 3.086439227766606e+00, // 507
-6.371557964912508e-02, // 508
 1.238540257655468e+02, // 509
-2.121207608816254e+01, // 510
 5.456729929854715e+00, // 511
-1.250612948678988e+01, // 512
 2.299451531688356e-03, // 513
 4.180273602745868e-02, // 514
-4.939558611548353e+00, // 515
 1.160042890812918e+01, // 516
 3.008131591006647e+00, // 517
-1.282082421425462e+01, // 518
-3.449905656667261e+01, // 519
-5.996209460802854e+00, // 520
 7.719180512310523e+00, // 521
 2.204269071879296e+02, // 522
-7.489845430835415e-01, // 523
 9.263218220232172e+01, // 524
-1.235528952359672e-01, // 525
-2.566276291050408e+02, // 526
 1.265256038106887e+00, // 527
-2.486492228171665e+01, // 528
-6.787962793408344e-01, // 529
 2.942567663791593e+01, // 530
 8.088011146472976e-02, // 531
 2.974809367973409e-01, // 532
-2.718900408412938e-02, // 533
 2.429072430536316e+01, // 534
-5.547571027506721e+01, // 535
 6.333292325563090e-01, // 536
 7.635026331320105e+00, // 537
-5.348379579265002e+01, // 538
 1.231007864235546e+02, // 539
 1.004139118704472e-01, // 540
 4.477072902094370e-01, // 541
-4.143598786966571e+00, // 542
 8.277051644797510e+00, // 543
-1.083159219111794e+00, // 544
-8.289386504954413e+00, // 545
-8.128714282797274e+00, // 546
-1.497385401006016e+01, // 547
-1.007147007076126e+02, // 548
 8.648352943879010e+01, // 549
 1.456478762985171e+00, // 550
-4.612068091322124e-03, // 551
-3.639090463851567e-02, // 552
 9.977549534065758e-01, // 553
-1.420232075332941e+01, // 554
-1.418125497325432e+02, // 555
 7.636196471895414e+01, // 556
-1.320604925065300e+01, // 557
 4.610771903076748e+01, // 558
 5.323793829484677e+00, // 559
 3.413549734489209e+01, // 560
 1.817068230567581e+00, // 561
 3.500580049756329e-01, // 562
-2.960262214583161e+00, // 563
 5.641093309766811e+01, // 564
-1.964191987114689e-02, // 565
 2.446616120263628e+01, // 566
-3.264661019300677e+00, // 567
 3.081937433967912e+00, // 568
 4.502029298749388e-01, // 569
-1.031911156762103e-01, // 570
-3.310123573594600e+00, // 571
-2.101911713173842e-02, // 572
 3.466070241395024e-01, // 573
 1.189279388881876e+00, // 574
-1.127061855045605e+02, // 575
 1.263933276638173e-01, // 576
 6.681971340738657e-02, // 577
 6.284029334237080e+01, // 578
-3.043403214475582e+01, // 579
-2.820409480936358e+00, // 580
 2.106802457512620e-01, // 581
-1.485257658105050e+01, // 582
-4.903259658474490e-01, // 583
 3.862829304995429e-02, // 584
-7.509191328306947e+01, // 585
 1.083247185778406e+01, // 586
 7.633969819430862e+00, // 587
-1.131421799296621e-02, // 588
-2.221833308926601e+01, // 589
 8.404672151359003e-01, // 590
-1.378185554094023e-01, // 591
 4.557426517908780e+01, // 592
 1.177199946269888e-01, // 593
 3.384130996423312e+00, // 594
 3.023100662962822e+00, // 595
 4.491175342803845e-02, // 596
 8.849671621270865e+01, // 597
 3.195981509902638e-01, // 598
-5.350684846972401e+01, // 599
-7.393318923970100e-01, // 600
-1.692450949678891e+00, // 601
 1.840928900021751e+00, // 602
-8.887902528582131e-02, // 603
 1.587842207632577e-01, // 604
-3.665694075839510e-01, // 605
-3.467512443410612e-01, // 606
 6.276404097200905e+01, // 607
 5.744973124013432e-01, // 608
 4.615068773069549e+00, // 609
-3.190721710714589e+00, // 610
-4.638779702119214e+01, // 611
 1.113309074011598e+01, // 612
-4.188020421449023e+01, // 613
-3.582831391480536e-01, // 614
 1.072960385262403e+00, // 615
-3.459629933816449e+00, // 616
 2.482860688685033e+02, // 617
-5.445248529680180e-02, // 618
 1.166640612482355e+02, // 619
-2.510964603077125e-02, // 620
-3.006672736016939e+00, // 621
 9.335968269531501e-03, // 622
 4.298425679950218e+01, // 623
-7.884421074360738e-02, // 624
 1.870846460965276e+00, // 625
-7.081708815018496e+00, // 626
-6.756428103732139e-01, // 627
-4.856119577638900e-01, // 628
 1.997974215765205e+01, // 629
 1.879066253264648e+02, // 630
-5.141250600532381e+00, // 631
 4.116654396307231e+00, // 632
-6.290067949287658e+01, // 633
 5.748993815448852e+01, // 634
 2.799570881982271e-01, // 635
 1.012989648175196e-01, // 636
 1.743685406339655e+01, // 637
-7.916076879902594e+01, // 638
-8.661114871234068e-01, // 639
 7.317141591595806e+01, // 640
 2.443303457858927e-01, // 641
 3.445588231847705e-02, // 642
 9.800288318848067e-01, // 643
-7.223768962102337e+00, // 644
-7.430660867206435e+00, // 645
-4.294249151422350e-01, // 646
 6.031901573780469e+00, // 647
-9.010704251429872e-01, // 648
-2.146234599405905e+00, // 649
 2.011259440325461e+01, // 650
 1.323364026261334e-01, // 651
-3.812747371142798e+00, // 652
-3.235886830608688e-01, // 653
-2.258306088727230e-01, // 654
-8.731899640930448e+01, // 655
 6.728732194389934e+00, // 656
-1.318656176039145e+01, // 657
-6.912655059486575e-02, // 658
 3.228721860323332e-02, // 659
-1.771329721450113e+00, // 660
 3.480684231811813e-01, // 661
 1.182455696934465e-01, // 662
 1.188322714449733e+02, // 663
-1.218157981522507e-01, // 664
-9.230094084063513e-01, // 665
 6.238684131596141e-01, // 666
 1.696572074206312e+00, // 667
 3.352985269359715e+00, // 668
-1.034028806727284e+02, // 669
 6.468346534032068e+00, // 670
 1.633899441127709e-01, // 671
 1.823110942746265e-01, // 672
-8.916170922652276e-01, // 673
-1.419314909374781e-01, // 674
-1.797138583140362e-01, // 675
 8.978996584560707e-02, // 676
-9.827377250663846e-03, // 677
 7.212196020957975e+01, // 678
-3.813787726618171e+01, // 679
 1.401185338284033e+02, // 680
-9.318982131209909e-03, // 681
 3.806473346293205e-01, // 682
-1.023371871907695e+00, // 683
 5.081664151969620e+00, // 684
-1.046794835619088e+00, // 685
-6.789923467192767e+00, // 686
 1.568276009327105e-02, // 687
-3.767304912489343e-02, // 688
 6.790025045969550e+00, // 689
-2.087074679624064e+00, // 690
 9.079251861142991e-01, // 691
 5.546673575659086e-01, // 692
 9.075617738920961e+00, // 693
-4.319142443257894e+01, // 694
-2.678524834554539e-02, // 695
-1.222419378928886e+00, // 696
-5.436296318821213e-01, // 697
-1.651077509541747e+01, // 698
-8.468306299713714e+01, // 699
 2.336096702517753e-01, // 700
 1.092597132260754e+02, // 701
-1.826162155598675e+00, // 702
-1.676031333613634e-01, // 703
-1.898163486536420e-01, // 704
-2.657929820813925e+01, // 705
-8.731837401561260e-02, // 706
 7.039654314350489e+00, // 707
-3.174611408172285e-01, // 708
-1.404823713853109e+01, // 709
-2.376635610466704e+00, // 710
 6.081548715996397e-02, // 711
-8.001546631998050e+01, // 712
-2.071911048504532e+00, // 713
-3.534753988809616e-01, // 714
-2.067242280368572e-01, // 715
-4.757305163202998e-01, // 716
-5.530163571704066e+01, // 717
-7.568003671149492e+01, // 718
-7.617886072076678e-02, // 719
 2.021616945484459e+00, // 720
 1.649652179255391e-01, // 721
 1.293969798918929e+00, // 722
-3.312867277195993e-01, // 723
 5.282815240181995e+00, // 724
 1.842217616069262e+00, // 725
-4.147425292537025e-02, // 726
 9.489001361496866e-01, // 727
 3.376172023130616e+00, // 728
 6.930275409688080e+00, // 729
-5.139441897055596e+00, // 730
 8.058623795288975e+01, // 731
-2.173815257751215e+00, // 732
-9.566758202780239e+00, // 733
 2.272330925645273e-01, // 734
 1.004342863213429e-01, // 735
 6.142179143558911e-01, // 736
 8.518988492498270e+00, // 737
 6.997877905618862e-01, // 738
-1.140281137468197e-01, // 739
 1.919364984011543e+01, // 740
-4.604105805583427e-01, // 741
-6.061462509740927e+01, // 742
 2.720597721897714e+00, // 743
 2.489550263060918e-01, // 744
 6.135142942126924e+01, // 745
 4.615308842462796e-01, // 746
 2.705939897750200e+00, // 747
-9.205575438272821e-01, // 748
 2.689212427256301e+01, // 749
 3.137949420407146e-02, // 750
 3.023191722358338e+01, // 751
 2.029212590552417e+00, // 752
 2.075072024287358e-02, // 753
 7.854391662710304e+01, // 754
-4.339974788352194e-01, // 755
-2.316563294353810e+00, // 756
 3.018681229886784e+01, // 757
 1.499489430578813e-02, // 758
-1.927103195569686e+01, // 759
-7.656948197977154e-02, // 760
-5.827527869979830e+01, // 761
 1.258663529393653e+00, // 762
 8.457382657813639e+00, // 763
 5.170800398206278e-03, // 764
 8.525553374569957e+01, // 765
 6.113834806591186e+00, // 766
-3.398949095387638e-02, // 767
 6.232301991320456e+00, // 768
-4.782253732020093e+00, // 769
-2.881732857579367e+00, // 770
-8.814324754122424e+00, // 771
 6.395321107535422e-02, // 772
 7.553293669067888e-02, // 773
-7.047042332705106e-01, // 774
-2.765850782083577e-01, // 775
 1.603826767371277e+01, // 776
 1.113438915041319e-02, // 777
-2.712989189241391e-01, // 778
-3.142845261489954e-01, // 779
-1.281328858833902e-01, // 780
 2.042368597613692e+01, // 781
 9.502374558468724e-01, // 782
-6.254556748986906e-01, // 783
-1.225200544952098e+01, // 784
-3.547476600650738e+00, // 785
 2.079051233002305e-01, // 786
 1.239195270391996e+00, // 787
 4.761565448008010e+01, // 788
 3.197149907452618e-01, // 789
-7.182953620125198e-01, // 790
 4.917382184744419e-01, // 791
 5.642627354124552e+01, // 792
-3.196631224277058e-01, // 793
 3.805124556375547e-02, // 794
-1.466361204380230e+00, // 795
 7.869655242222987e-02, // 796
-6.457220544202321e-01, // 797
-2.939526246258476e+01, // 798
-1.199994286570194e+01, // 799
 9.605800616921259e-02, // 800
-2.581044882681701e+00, // 801
 2.979967898027294e+01, // 802
 5.395456786223506e-02, // 803
 6.540301654771137e-01, // 804
 2.364266657486684e+00, // 805
-2.039956006861996e-01, // 806
 1.112149659963045e-02, // 807
 4.579489690034828e+00, // 808
 6.908624312960512e-02, // 809
 3.549712473577594e-01, // 810
 5.696434611412275e+01, // 811
-4.919303067714170e+00, // 812
 1.512543247872330e+00, // 813
-1.780916421954783e+00, // 814
 1.691411938848471e-01, // 815
 3.879201985878144e+00, // 816
-6.619150506491050e+01, // 817
-3.041132358377871e+00, // 818
-5.830740482314796e-01, // 819
-3.108724352041018e-01, // 820
 1.913966913064108e+01, // 821
-2.911276202105206e-02, // 822
 1.121353351692266e+02, // 823
 1.205001299127740e-01, // 824
-3.926653426925602e+00, // 825
-1.887603338692060e-01, // 826
 1.796755383062107e+00, // 827
-6.446746422436823e+01, // 828
 6.294141911793169e+00, // 829
 1.129625334651365e+00, // 830
-3.331197375010483e+00, // 831
 6.397813877680661e+00, // 832
 9.007173772600486e+01, // 833
-2.207081720267360e-01, // 834
-1.195821510994289e+02, // 835
 1.739888877071372e-01, // 836
 1.055130303940782e+01, // 837
-5.967178611788244e-02, // 838
-3.000349152130033e-03, // 839
 6.053962348522060e+01, // 840
-3.045030710450808e+00, // 841
-2.818121407701521e+00, // 842
-5.480644624377645e+00, // 843
-3.207729821425893e-01, // 844
-1.510569054979823e-01, // 845
-3.969133478469281e+01, // 846
 2.132999481601582e+01, // 847
-2.656816602524846e+01, // 848
-2.049048992047804e+00, // 849
-4.104420990555724e-01, // 850
-6.361414837965257e-01, // 851
-4.498016107681992e-01, // 852
-3.702080121164433e-02, // 853
 2.986879775434061e+00, // 854
-2.827286865866594e+00, // 855
-4.413363546909970e-01, // 856
-1.888309554796168e+01, // 857
-2.426179519614958e+01, // 858
 2.757078058433585e+00, // 859
-1.387602085561815e+01, // 860
-3.430507513564550e+01, // 861
 3.963501781422604e-01, // 862
 1.115682548026868e+01, // 863
 2.120214564458290e-02, // 864
-4.669221015145504e-01, // 865
-5.029617882041877e+00, // 866
 3.827132461114959e+01, // 867
-1.223084385208557e-02, // 868
-6.078944711065385e+00, // 869
-1.325433337609490e-01, // 870
 1.002559067770272e+00, // 871
 5.389689649835077e+00, // 872
 5.980438448005255e+01, // 873
-1.897415082249724e+00, // 874
-4.138199079922217e-02, // 875
-1.038825038278864e+00, // 876
-9.969370443243019e+00, // 877
-6.763935034524171e+01, // 878
 5.402119876827092e+00, // 879
-1.988778744033169e-01, // 880
-1.507175654937052e+01, // 881
-1.917304657665396e+00, // 882
 2.983471438352771e-01, // 883
 5.225420113680068e-01, // 884
-1.600165590740241e+01, // 885
 5.169475412226622e-02, // 886
 4.306000245365191e-01, // 887
-1.455998453823046e+01, // 888
-5.391971342251058e+00, // 889
 7.047137311497005e-01, // 890
-3.512731621816575e+01, // 891
 1.733182068752497e+00, // 892
 9.875989056481266e-02, // 893
 5.500837141345804e+01, // 894
 3.966715412513881e-01, // 895
 1.403031957554378e-01, // 896
 6.823017932079733e+01, // 897
 2.410719704386489e+00, // 898
-1.378526793665064e-01, // 899
-1.280477825372019e+02, // 900
 5.397685319886474e+01, // 901
 5.507544369556275e+00, // 902
-1.677489101765554e-01, // 903
 6.920486447504742e-01, // 904
-3.346895174340249e-01, // 905
 7.160248791139006e+01, // 906
-7.392440610119193e-01, // 907
 2.407107503528791e+00, // 908
 1.197470112273731e-01, // 909
-4.964153581195762e+01, // 910
 1.723880521142340e+01, // 911
 5.148717262364312e-02, // 912
 6.735353288011938e+00, // 913
-6.539264173970547e+00, // 914
 3.350680873542726e-01, // 915
 1.622528716300838e-02, // 916
 9.665506877899288e+00, // 917
-6.122605661317155e-02, // 918
-1.151098161940165e+00, // 919
-1.631985817763448e+00, // 920
 5.779221656021031e-01, // 921
-1.791101287094417e+02, // 922
 6.450907277673882e+00, // 923
-2.570682747565395e+02, // 924
-1.463963121358746e+00, // 925
 4.043513493214679e+00, // 926
-1.060341329970456e+01, // 927
 1.176202010070308e+00, // 928
 2.127341509320432e+01, // 929
-2.613392942570148e-01, // 930
-6.157275452349184e+01, // 931
 2.095821033141130e+01, // 932
 3.226397417095282e+00, // 933
 2.748354720138988e+00, // 934
 1.654313173614968e+00, // 935
 7.517929239954586e-02, // 936
 7.282537613584714e+00, // 937
 1.080146368090374e+01, // 938
 2.129350050559131e+00, // 939
-4.854962326800812e+00, // 940
 4.719335156710986e+00, // 941
-2.794046427296810e+01, // 942
 1.042009377400220e+02, // 943
 4.157494949963760e-04, // 944
-4.452189865282329e-01, // 945
-3.736264147297200e-01, // 946
 4.902885141369789e+00, // 947
 4.751654192547827e-01, // 948
-3.763456092995158e+01, // 949
 1.049253096418400e-01, // 950
 6.130956815118181e-02, // 951
-2.082269407601615e+02, // 952
-1.636826116704528e+00, // 953
 8.527827103283245e-01, // 954
 2.025902300756410e-01, // 955
 7.366252854154605e+01, // 956
 3.407567567923256e+01, // 957
-6.091861219168743e-02, // 958
-4.995647422059564e+01, // 959
 3.808423644923865e+01, // 960
 3.691614146335688e-02, // 961
 1.855718467604253e+01, // 962
-2.492022369872553e+00, // 963
 2.344406320851192e-01, // 964
-3.131970433346300e+01, // 965
-1.096346450071945e+02, // 966
 9.672264671857967e-01, // 967
-4.688373157782355e-01, // 968
 2.273378438526339e-01, // 969
 4.723120911096611e-01, // 970
-5.410238058416197e-01, // 971
-2.862911895714060e-01, // 972
 5.259136503739384e-01, // 973
-1.020983775469918e-01, // 974
 1.300460854317995e-01, // 975
 1.019600371895990e+01, // 976
-2.842701250641865e+01, // 977
-4.719433654221586e+00, // 978
-2.835913767723737e-01, // 979
 5.870727354280804e+00, // 980
 1.984344683485196e+01, // 981
 9.880302027456839e-01, // 982
 7.949309529941391e+01, // 983
 3.371234951351362e-02, // 984
 1.026360919242211e+01, // 985
 7.229839414240541e+01, // 986
 1.619006627384231e+00, // 987
-4.669450552845240e-01, // 988
-2.298947512409326e-01, // 989
-1.923203284734087e+00, // 990
 5.355850645600398e-02, // 991
 3.471085720988995e-02, // 992
 1.763732441321294e-01, // 993
 2.472115668762874e-01, // 994
-1.044720896279668e+01, // 995
-3.008052172644284e+01, // 996
 3.231553507996297e-02, // 997
-2.385355370354953e+01, // 998
-1.476012808636594e+00, // 999
 1.016897788168496e+00, // 1000
 8.443593438953484e-01, // 1001
 4.263193757281606e+00, // 1002
-2.736681003461453e+01, // 1003
 1.751580981328670e+01, // 1004
 2.725454224820749e-01, // 1005
-1.255761606982485e+02, // 1006
-2.606023061249441e-01, // 1007
 4.836391122698313e-02, // 1008
 6.551387419887243e-01, // 1009
 4.031975406775022e-01, // 1010
 4.038957641636964e-01, // 1011
-7.857096468609130e+00, // 1012
-2.156949134885909e-01, // 1013
 3.953923404086283e+01, // 1014
 6.573739088775333e+00, // 1015
-1.828708356892615e-01, // 1016
 9.750659168941174e-02, // 1017
 7.383261165775431e+00, // 1018
-2.442922570736668e-01, // 1019
-8.034076635493390e+01, // 1020
-3.518264379977364e+01, // 1021
-2.325858147143219e+01, // 1022
 1.305823778370437e-03, // 1023
 3.450652882738726e+01, // 1024
-1.296095758520082e-01, // 1025
 1.716258425186197e-01, // 1026
 7.967887493022306e-02, // 1027
-7.209314491952905e+00, // 1028
-1.412268300522099e-02, // 1029
-2.349985983312894e-02, // 1030
 3.721228944725072e-01, // 1031
 6.136012863016183e-03, // 1032
-2.430364820867503e-01, // 1033
-2.550819233185127e-01, // 1034
 8.393655950110599e-03, // 1035
 1.482441292445110e+00, // 1036
-7.333953496793649e-01, // 1037
-5.291402213909376e-01, // 1038
 7.316216402461166e+01, // 1039
 2.332912719195296e-01, // 1040
-1.740480238389830e-01, // 1041
 6.805880238473071e-01, // 1042
 8.479976527348185e+01, // 1043
-4.238504322659205e-02, // 1044
 1.966668941067684e-01, // 1045
 1.061903941639881e+01, // 1046
 1.878822549723979e-01, // 1047
-2.568018214477019e-01, // 1048
 6.764363251220746e-01, // 1049
 1.699336359178359e-01, // 1050
 1.384861073696949e-02, // 1051
 1.012743849237314e+02, // 1052
-3.099943106549108e+01, // 1053
-8.503561208069577e+00, // 1054
-1.450196786194604e-02, // 1055
-1.033412248765002e+00, // 1056
 5.937753561222018e+00, // 1057
-1.074226029375429e+01, // 1058
 3.995817080326604e+01, // 1059
 6.581033129868692e+01, // 1060
 1.113257843780585e+02, // 1061
-7.906363410261342e+01, // 1062
-2.672565771277416e+01, // 1063
-1.549516460161908e+00, // 1064
 2.145027522704667e+01, // 1065
-1.754327982004411e+01, // 1066
 1.319927462790028e+00, // 1067
 1.843986012482895e-01, // 1068
-1.732587933135544e+00, // 1069
-3.322700155255246e+00, // 1070
-6.014451334884513e-01, // 1071
-9.469766173647463e+00, // 1072
-1.506673393314790e+00, // 1073
-1.680950738998007e+01, // 1074
 2.350952441986010e-02, // 1075
 1.445666408371890e+01, // 1076
 2.312817387359236e-01, // 1077
-8.439768495649050e-02, // 1078
-8.028382214340116e-01, // 1079
-1.493854504998229e+01, // 1080
-1.724774545709200e-01, // 1081
 1.315824248463543e+02, // 1082
 4.346969066686145e-01, // 1083
 6.563226717235209e+01, // 1084
 7.292307841510251e+00, // 1085
 3.621519918551797e+01, // 1086
 1.102604278854342e+01, // 1087
 1.555674272890748e+00, // 1088
 4.514031689353544e-01, // 1089
-5.012382859335242e-03, // 1090
-5.096418465621244e-03, // 1091
 3.540343212945214e+01, // 1092
-1.512819090191988e+01, // 1093
 2.271880371652195e+00, // 1094
-7.857028551196636e-01, // 1095
 4.709595309906268e+01, // 1096
 5.917956254649207e-02, // 1097
-2.309974547168300e+01, // 1098
 2.829297449412874e-01, // 1099
-1.229603815777666e+01, // 1100
 8.069948261241700e-02, // 1101
-2.719860159012675e+01, // 1102
-3.856408435162385e+01, // 1103
-1.049582292360775e+01, // 1104
 4.026681865168871e+00, // 1105
 4.137797244273829e+00, // 1106
-3.424522683360346e-02, // 1107
 4.331322429541135e-02, // 1108
-3.082870786757959e+00, // 1109
 4.021428343417432e-01, // 1110
-2.517921781757513e-01, // 1111
-1.583397448473755e-02, // 1112
-5.348775985839819e+01, // 1113
-7.396842892794186e-01, // 1114
-1.087308492054468e+01, // 1115
-3.826062502351501e-02, // 1116
-1.133761128214752e-01, // 1117
 2.996492792733707e+01, // 1118
 8.098717246260215e+01, // 1119
-1.171071456845823e+01, // 1120
 3.553546797567371e-01, // 1121
-7.769618865203007e+01, // 1122
-6.732237631395997e-02, // 1123
-1.085660426053505e+00, // 1124
 3.557912707037755e-01, // 1125
-1.448932695677377e+02, // 1126
 7.498254371702717e-01, // 1127
-5.419638010624532e-01, // 1128
 1.395665250425709e-01, // 1129
-1.808963498143991e+02, // 1130
-2.441884478816585e+00, // 1131
-4.825619248692610e-01, // 1132
 5.280357403359511e+00, // 1133
-2.294273214741706e+01, // 1134
 1.442241917181185e+02, // 1135
-3.591994114401967e+01, // 1136
 1.086594968087736e+02, // 1137
-5.084499396898359e-01, // 1138
 9.150686410217251e+01, // 1139
-5.228957241140889e-01, // 1140
-2.070337837138105e+01, // 1141
-1.790606309940559e-01, // 1142
 3.995793609879848e-02, // 1143
-5.846306895890182e-01, // 1144
 1.082841672519922e+00, // 1145
 8.221674698426060e-02, // 1146
 1.037731402575743e+00, // 1147
 7.842051177119114e+01, // 1148
-4.386620628277982e+01, // 1149
-1.873278464155920e-01, // 1150
-9.016828914892118e+01, // 1151
-1.410766385425871e+00  // 1152
};

//----------------------------------------------------------------------------//

} // namespace

////////////////////////////////////////////////////////////////////////////////

namespace x2o {

//----------------------------------------------------------------------------//

const double x2b_v9x::k_HH_intra = -5.625339129003804e-01; // A^(-1)
const double x2b_v9x::k_OH_intra =  1.650231421139977e+00; // A^(-1)

const double x2b_v9x::k_HH_coul =  1.120436281260838e+00; // A^(-1)
const double x2b_v9x::k_OH_coul =  1.168771592408594e+00; // A^(-1)
const double x2b_v9x::k_OO_coul =  1.425066900712335e+00; // A^(-1)

const double x2b_v9x::k_XH_main =  7.048207784852052e-01; // A^(-1)
const double x2b_v9x::k_XO_main =  8.052473049188279e-01; // A^(-1)
const double x2b_v9x::k_XX_main =  8.079388401912359e-01; // A^(-1)

const double x2b_v9x::in_plane_gamma = -9.968872887289151e-02;
const double x2b_v9x::out_of_plane_gamma =  9.611269670023746e-02;

const double x2b_v9x::r2i =  4.500000000000000e+00; // A
const double x2b_v9x::r2f =  6.500000000000000e+00; // A

//----------------------------------------------------------------------------//

double x2b_v9x::f_switch(const double& r, double& g)
{
    if (r > r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > r2i) {
        const double t1 = M_PI/(r2f - r2i);
        const double x = (r - r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_v9x::eval(const double* w1, const double* w2)
{
    // the switch

    const double dOO[3] = {w1[0] - w2[0],
                           w1[1] - w2[1],
                           w1[2] - w2[2]};

    const double rOOsq = dOO[0]*dOO[0] + dOO[1]*dOO[1] + dOO[2]*dOO[2];
    const double rOO = std::sqrt(rOOsq);

    if (rOO > r2f)
        return 0.0;

    // offsets

    const int Oa  = 0;
    const int Ha1 = 3;
    const int Ha2 = 6;

    const int Ob  = 9;
    const int Hb1 = 12;
    const int Hb2 = 15;

    const int Xa1 = 18;
    const int Xa2 = 21;

    const int Xb1 = 24;
    const int Xb2 = 27;

    double xcrd[30]; // coordinates including extra-points

    std::copy(w1, w1 + 9, xcrd);
    std::copy(w2, w2 + 9, xcrd + 9);

    // the extra-points

    monomer ma, mb;

    ma.setup(xcrd + Oa,
             in_plane_gamma, out_of_plane_gamma,
             xcrd + Xa1, xcrd + Xa2);

    mb.setup(xcrd + Ob,
             in_plane_gamma, out_of_plane_gamma,
             xcrd + Xb1, xcrd + Xb2);

    // variables

    const double d0_intra = 1.0;
    const double d0_inter = 4.0;

    double v[31]; // stored separately (gets passed to poly::eval)

    variable ctxt[31];

    v[0] = ctxt[0].v_exp(d0_intra, k_HH_intra, xcrd, Ha1, Ha2);
    v[1] = ctxt[1].v_exp(d0_intra, k_HH_intra, xcrd, Hb1, Hb2);

    v[2] = ctxt[2].v_exp(d0_intra, k_OH_intra, xcrd, Oa, Ha1);
    v[3] = ctxt[3].v_exp(d0_intra, k_OH_intra, xcrd, Oa, Ha2);
    v[4] = ctxt[4].v_exp(d0_intra, k_OH_intra, xcrd, Ob, Hb1);
    v[5] = ctxt[5].v_exp(d0_intra, k_OH_intra, xcrd, Ob, Hb2);

    v[6] = ctxt[6].v_coul(d0_inter, k_HH_coul, xcrd, Ha1, Hb1);
    v[7] = ctxt[7].v_coul(d0_inter, k_HH_coul, xcrd, Ha1, Hb2);
    v[8] = ctxt[8].v_coul(d0_inter, k_HH_coul, xcrd, Ha2, Hb1);
    v[9] = ctxt[9].v_coul(d0_inter, k_HH_coul, xcrd, Ha2, Hb2);

    v[10] = ctxt[10].v_coul(d0_inter, k_OH_coul, xcrd, Oa, Hb1);
    v[11] = ctxt[11].v_coul(d0_inter, k_OH_coul, xcrd, Oa, Hb2);
    v[12] = ctxt[12].v_coul(d0_inter, k_OH_coul, xcrd, Ob, Ha1);
    v[13] = ctxt[13].v_coul(d0_inter, k_OH_coul, xcrd, Ob, Ha2);

    v[14] = ctxt[14].v_coul(d0_inter, k_OO_coul, xcrd, Oa, Ob);

    v[15] = ctxt[15].v_exp(d0_inter, k_XH_main, xcrd, Xa1, Hb1);
    v[16] = ctxt[16].v_exp(d0_inter, k_XH_main, xcrd, Xa1, Hb2);
    v[17] = ctxt[17].v_exp(d0_inter, k_XH_main, xcrd, Xa2, Hb1);
    v[18] = ctxt[18].v_exp(d0_inter, k_XH_main, xcrd, Xa2, Hb2);
    v[19] = ctxt[19].v_exp(d0_inter, k_XH_main, xcrd, Xb1, Ha1);
    v[20] = ctxt[20].v_exp(d0_inter, k_XH_main, xcrd, Xb1, Ha2);
    v[21] = ctxt[21].v_exp(d0_inter, k_XH_main, xcrd, Xb2, Ha1);
    v[22] = ctxt[22].v_exp(d0_inter, k_XH_main, xcrd, Xb2, Ha2);

    v[23] = ctxt[23].v_exp(d0_inter, k_XO_main, xcrd, Oa, Xb1);
    v[24] = ctxt[24].v_exp(d0_inter, k_XO_main, xcrd, Oa, Xb2);
    v[25] = ctxt[25].v_exp(d0_inter, k_XO_main, xcrd, Ob, Xa1);
    v[26] = ctxt[26].v_exp(d0_inter, k_XO_main, xcrd, Ob, Xa2);

    v[27] = ctxt[27].v_exp(d0_inter, k_XX_main, xcrd, Xa1, Xb1);
    v[28] = ctxt[28].v_exp(d0_inter, k_XX_main, xcrd, Xa1, Xb2);
    v[29] = ctxt[29].v_exp(d0_inter, k_XX_main, xcrd, Xa2, Xb1);
    v[30] = ctxt[30].v_exp(d0_inter, k_XX_main, xcrd, Xa2, Xb2);

    const double E_poly = poly_2b_v6x::eval(thefit, v);

    // the switch

    double gsw;
    const double sw = f_switch(rOO, gsw);

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

double x2b_v9x::eval
    (const double* w1, const double* w2, double* g1, double* g2)
{
    // the switch

    const double dOO[3] = {w1[0] - w2[0],
                           w1[1] - w2[1],
                           w1[2] - w2[2]};

    const double rOOsq = dOO[0]*dOO[0] + dOO[1]*dOO[1] + dOO[2]*dOO[2];
    const double rOO = std::sqrt(rOOsq);

    if (rOO > r2f)
        return 0.0;

    // offsets

    const int Oa  = 0;
    const int Ha1 = 3;
    const int Ha2 = 6;

    const int Ob  = 9;
    const int Hb1 = 12;
    const int Hb2 = 15;

    const int Xa1 = 18;
    const int Xa2 = 21;

    const int Xb1 = 24;
    const int Xb2 = 27;

    double xcrd[30]; // coordinates including extra-points

    std::copy(w1, w1 + 9, xcrd);
    std::copy(w2, w2 + 9, xcrd + 9);

    // the extra-points

    monomer ma, mb;

    ma.setup(xcrd + Oa,
             in_plane_gamma, out_of_plane_gamma,
             xcrd + Xa1, xcrd + Xa2);

    mb.setup(xcrd + Ob,
             in_plane_gamma, out_of_plane_gamma,
             xcrd + Xb1, xcrd + Xb2);

    // variables

    const double d0_intra = 1.0;
    const double d0_inter = 4.0;

    double v[31]; // stored separately (gets passed to poly::eval)

    variable ctxt[31];

    v[0] = ctxt[0].v_exp(d0_intra, k_HH_intra, xcrd, Ha1, Ha2);
    v[1] = ctxt[1].v_exp(d0_intra, k_HH_intra, xcrd, Hb1, Hb2);

    v[2] = ctxt[2].v_exp(d0_intra, k_OH_intra, xcrd, Oa, Ha1);
    v[3] = ctxt[3].v_exp(d0_intra, k_OH_intra, xcrd, Oa, Ha2);
    v[4] = ctxt[4].v_exp(d0_intra, k_OH_intra, xcrd, Ob, Hb1);
    v[5] = ctxt[5].v_exp(d0_intra, k_OH_intra, xcrd, Ob, Hb2);

    v[6] = ctxt[6].v_coul(d0_inter, k_HH_coul, xcrd, Ha1, Hb1);
    v[7] = ctxt[7].v_coul(d0_inter, k_HH_coul, xcrd, Ha1, Hb2);
    v[8] = ctxt[8].v_coul(d0_inter, k_HH_coul, xcrd, Ha2, Hb1);
    v[9] = ctxt[9].v_coul(d0_inter, k_HH_coul, xcrd, Ha2, Hb2);

    v[10] = ctxt[10].v_coul(d0_inter, k_OH_coul, xcrd, Oa, Hb1);
    v[11] = ctxt[11].v_coul(d0_inter, k_OH_coul, xcrd, Oa, Hb2);
    v[12] = ctxt[12].v_coul(d0_inter, k_OH_coul, xcrd, Ob, Ha1);
    v[13] = ctxt[13].v_coul(d0_inter, k_OH_coul, xcrd, Ob, Ha2);

    v[14] = ctxt[14].v_coul(d0_inter, k_OO_coul, xcrd, Oa, Ob);

    v[15] = ctxt[15].v_exp(d0_inter, k_XH_main, xcrd, Xa1, Hb1);
    v[16] = ctxt[16].v_exp(d0_inter, k_XH_main, xcrd, Xa1, Hb2);
    v[17] = ctxt[17].v_exp(d0_inter, k_XH_main, xcrd, Xa2, Hb1);
    v[18] = ctxt[18].v_exp(d0_inter, k_XH_main, xcrd, Xa2, Hb2);
    v[19] = ctxt[19].v_exp(d0_inter, k_XH_main, xcrd, Xb1, Ha1);
    v[20] = ctxt[20].v_exp(d0_inter, k_XH_main, xcrd, Xb1, Ha2);
    v[21] = ctxt[21].v_exp(d0_inter, k_XH_main, xcrd, Xb2, Ha1);
    v[22] = ctxt[22].v_exp(d0_inter, k_XH_main, xcrd, Xb2, Ha2);

    v[23] = ctxt[23].v_exp(d0_inter, k_XO_main, xcrd, Oa, Xb1);
    v[24] = ctxt[24].v_exp(d0_inter, k_XO_main, xcrd, Oa, Xb2);
    v[25] = ctxt[25].v_exp(d0_inter, k_XO_main, xcrd, Ob, Xa1);
    v[26] = ctxt[26].v_exp(d0_inter, k_XO_main, xcrd, Ob, Xa2);

    v[27] = ctxt[27].v_exp(d0_inter, k_XX_main, xcrd, Xa1, Xb1);
    v[28] = ctxt[28].v_exp(d0_inter, k_XX_main, xcrd, Xa1, Xb2);
    v[29] = ctxt[29].v_exp(d0_inter, k_XX_main, xcrd, Xa2, Xb1);
    v[30] = ctxt[30].v_exp(d0_inter, k_XX_main, xcrd, Xa2, Xb2);

    double g[31];
    const double E_poly = poly_2b_v6x::eval(thefit, v, g);

    double xgrd[30];
    std::fill(xgrd, xgrd + 30, 0.0);

    ctxt[0].grads(g[0], xgrd, Ha1, Ha2);
    ctxt[1].grads(g[1], xgrd, Hb1, Hb2);

    ctxt[2].grads(g[2], xgrd, Oa, Ha1);
    ctxt[3].grads(g[3], xgrd, Oa, Ha2);
    ctxt[4].grads(g[4], xgrd, Ob, Hb1);
    ctxt[5].grads(g[5], xgrd, Ob, Hb2);

    ctxt[6].grads(g[6], xgrd, Ha1, Hb1);
    ctxt[7].grads(g[7], xgrd, Ha1, Hb2);
    ctxt[8].grads(g[8], xgrd, Ha2, Hb1);
    ctxt[9].grads(g[9], xgrd, Ha2, Hb2);

    ctxt[10].grads(g[10], xgrd, Oa, Hb1);
    ctxt[11].grads(g[11], xgrd, Oa, Hb2);
    ctxt[12].grads(g[12], xgrd, Ob, Ha1);
    ctxt[13].grads(g[13], xgrd, Ob, Ha2);

    ctxt[14].grads(g[14], xgrd, Oa, Ob);

    ctxt[15].grads(g[15], xgrd, Xa1, Hb1);
    ctxt[16].grads(g[16], xgrd, Xa1, Hb2);
    ctxt[17].grads(g[17], xgrd, Xa2, Hb1);
    ctxt[18].grads(g[18], xgrd, Xa2, Hb2);
    ctxt[19].grads(g[19], xgrd, Xb1, Ha1);
    ctxt[20].grads(g[20], xgrd, Xb1, Ha2);
    ctxt[21].grads(g[21], xgrd, Xb2, Ha1);
    ctxt[22].grads(g[22], xgrd, Xb2, Ha2);

    ctxt[23].grads(g[23], xgrd, Oa, Xb1);
    ctxt[24].grads(g[24], xgrd, Oa, Xb2);
    ctxt[25].grads(g[25], xgrd, Ob, Xa1);
    ctxt[26].grads(g[26], xgrd, Ob, Xa2);

    ctxt[27].grads(g[27], xgrd, Xa1, Xb1);
    ctxt[28].grads(g[28], xgrd, Xa1, Xb2);
    ctxt[29].grads(g[29], xgrd, Xa2, Xb1);
    ctxt[30].grads(g[30], xgrd, Xa2, Xb2);

    // distribute gradients w.r.t. the X-points

    ma.grads(xgrd + Xa1, xgrd + Xa2,
             in_plane_gamma, out_of_plane_gamma,
             xgrd + Oa);

    mb.grads(xgrd + Xb1, xgrd + Xb2,
             in_plane_gamma, out_of_plane_gamma,
             xgrd + Ob);

    // the switch

    double gsw;
    const double sw = f_switch(rOO, gsw);

    for (int i = 0; i < 9; ++i) {
        g1[i] += sw*xgrd[i];
        g2[i] += sw*xgrd[i + 9];
    }

    // gradient of the switch

    gsw *= E_poly/rOO;
    for (int i = 0; i < 3; ++i) {
        const double d = gsw*dOO[i];
        g1[i] += d;
        g2[i] -= d;
    }

    return sw*E_poly;
}

//----------------------------------------------------------------------------//

} // namespace x2o

////////////////////////////////////////////////////////////////////////////////
